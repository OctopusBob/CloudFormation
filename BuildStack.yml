AWSTemplateFormatVersion: 2010-09-09
Parameters:
  InstanceTypeParameter:
    Type: String
    Default: #{aws.instance-type}
    Description: Enter instance size. Default is m3.medium.
  AMI:
    Type: String
    Default: #{aws.ami-image}
    Description: AMI Image
  SubnetIdParameter:
    Type: String
    Default: #{aws.subnet-id}
  SecurityGroupIdParameter:
    Type: String
    MinLength: "1"
    Default: #{aws-security-group-id}
  IAMInstanceProfileParameter:
    Type: String
    Default: #{aws.iam-profile-name}
  VPCParameter:
    Type: String
    Default: #{aws.vpc-security-group-id}
Resources:
  #{aws.instance-name}:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMI
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
           - 
              !Ref SecurityGroupIdParameter
          SubnetId: !Ref SubnetIdParameter
      InstanceType: 
        Ref: InstanceTypeParameter
      KeyName: #{aws.security-key-name}
      IamInstanceProfile: !Ref IAMInstanceProfileParameter
      Tags:
        -
          Key: Name
          Value: #{aws.instance-name}
      UserData:
        Fn::Base64: !Join
          - ''
          -
            - |-
              <powershell>
              Start-Transcript -path "C:\Bootstrap.txt" -append  
              
              $octopusAdminDatabaseUser = "#{OctopusAdminUser}"
              $octopusAdminDatabasePassword = "#{OctopusAdminPassword}"
              $octopusAdminDatabaseServer = "#{DatabaseServer}"
              $connectionString = "Server=$octopusAdminDatabaseServer;Database=master;integrated security=true;"
              
              $sqlConnection = New-Object System.Data.SqlClient.SqlConnection
              $sqlConnection.ConnectionString = $connectionString

              $command = $sqlConnection.CreateCommand()
              $command.CommandType = [System.Data.CommandType]'Text'

              Write-Output "Opening the connection to $octopusAdminDatabaseServer"
              $sqlConnection.Open()
              
              Write-Output "Running the if not exists then create user command on the server"
              $command.CommandText = "CREATE LOGIN [$octopusAdminDatabaseUser] with Password='$octopusAdminDatabasePassword', default_database=master"            
              $command.ExecuteNonQuery()
              
              Write-Output "Granting the sysadmin role to $octopusAdminDatabaseUser"
              $command.CommandText = "sp_addsrvrolemember @loginame= '$octopusAdminDatabaseUser', @rolename = 'sysadmin'"  
              $command.ExecuteNonQuery()

              Write-Output "Successfully created the account $octopusAdminDatabaseUser"
              Write-Output "Closing the connection to $octopusAdminDatabaseServer"
              $sqlConnection.Close()
              
              $sqlRegistryPath = "HKLM:\Software\Microsoft\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQLServer"
              $sqlRegistryLoginName = "LoginMode"
              
              $sqlRegistryLoginValue = "2"
              
              New-ItemProperty -Path $sqlRegistryPath -Name $sqlRegistryLoginName -Value $sqlRegistryLoginValue -PropertyType DWORD -Force
              
              net stop MSSQLSERVER /y
              net start MSSQLSERVER
              
              Dism /Online /Enable-Feature /FeatureName:IIS-ASPNET45 /All | Write-Output
              Dism /Online /Enable-Feature /FeatureName:IIS-CertProvider /All | Write-Output
              Dism /Online /Enable-Feature /FeatureName:IIS-ManagementService /All | Write-Output
             
              Write-Output "Open port 8088 on Windows Firewall" 
              & netsh.exe firewall add portopening TCP 8088 "Trading Website" 
 
              $tentacleDownloadPath = "https://octopus.com/downloads/latest/WindowsX64/OctopusTentacle" 
              $octopusServerUrl = "#{OctopusUrl}" 
              $octopusApiKey = "#{OctopusApiKey}" 
              $octopusServerThumbprint = "#{OctopusServerThumbprint}" 
              $tentacleListenPort = 10933 
              $environmentToDeployTo = "#{Octopus.Environment.Name}"
              $tentacleHomeDirectory = "C:\Octopus" 
              $tentacleAppDirectory = "C:\Octopus\Applications" 
              $tentacleConfigFile = "C:\Octopus\Tentacle\Tentacle.config" 
 
              $tentaclePath = "C:\Tools\Octopus.Tentacle.msi" 
 
              function Get-MyPublicIPAddress { 
                  # Get Ip Address of Machine 
                  Write-Host "Getting public IP address" 
                  $ipAddress = Invoke-RestMethod http://ipinfo.io/json | Select-Object -exp ip 
                  return $ipAddress 
              } 
 
              function Get-FileFromServer 
              { 
                param ( 
                  [string]$url, 
                  [string]$saveAs 
                ) 
 
                Write-Host "Downloading $url to $saveAs" 
                [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 
                $downloader = new-object System.Net.WebClient 
                $downloader.DownloadFile($url, $saveAs) 
              } 
 
                Write-Output "Beginning Tentacle installation" 

                Write-Output "Downloading latest Octopus Tentacle MSI..." 

                $tentaclePath = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath(".\Tentacle.msi") 
                if ((test-path $tentaclePath) -ne $true) { 
                  Get-FileFromServer $tentacleDownloadPath $tentaclePath 
                } 

                Write-Output "Installing MSI" 
                $msiExitCode = (Start-Process -FilePath "msiexec.exe" -ArgumentList "/i Tentacle.msi /quiet" -Wait -Passthru).ExitCode 
                Write-Output "Tentacle MSI installer returned exit code $msiExitCode" 
                if ($msiExitCode -ne 0) { 
                  throw "Installation aborted" 
                } 

                Write-Output "Open port $tentacleListenPort on Windows Firewall" 
                & netsh.exe firewall add portopening TCP $tentacleListenPort "Octopus Tentacle" 
                if ($lastExitCode -ne 0) { 
                  throw "Installation failed when modifying firewall rules" 
                } 

                $ipAddress = Get-MyPublicIPAddress 
                $ipAddress = $ipAddress.Trim() 
                $computerName = "#{aws.register-machine-name-prefix}"

                Write-Output "Public IP address: " + $ipAddress 

                Write-Output "Configuring and registering Tentacle" 

                Set-Location "${env:ProgramFiles}\Octopus Deploy\Tentacle" 

              & .\tentacle.exe create-instance --instance "Tentacle" --config $tentacleConfigFile --console | Write-Output
              if ($lastExitCode -ne 0) { 
                throw "Installation failed on create-instance" 
              } 
              & .\tentacle.exe configure --instance "Tentacle" --home $tentacleHomeDirectory --console | Write-Output
              if ($lastExitCode -ne 0) { 
                throw "Installation failed on configure" 
              } 
              & .\tentacle.exe configure --instance "Tentacle" --app $tentacleAppDirectory --console | Write-Output
              if ($lastExitCode -ne 0) { 
                throw "Installation failed on configure" 
              } 
              & .\tentacle.exe configure --instance "Tentacle" --port $tentacleListenPort --console | Write-Output
              if ($lastExitCode -ne 0) { 
                throw "Installation failed on configure" 
              } 
              & .\tentacle.exe new-certificate --instance "Tentacle" --console | Write-Output
              if ($lastExitCode -ne 0) { 
                throw "Installation failed on creating new certificate" 
              } 
              & .\tentacle.exe configure --instance "Tentacle" --trust $octopusServerThumbprint --console | Write-Output
              if ($lastExitCode -ne 0) { 
                throw "Installation failed on configure" 
              } 
              & .\tentacle.exe register-with --instance "Tentacle" --server $octopusServerUrl --role "Database-TerraForm" --role "Web-TerraForm" --environment $environmentToDeployTo --environment "TearDown" --name $computerName --publicHostName $ipAddress --apiKey $octopusApiKey --comms-style TentaclePassive --force --console | Write-Output
              if ($lastExitCode -ne 0) { 
                throw "Installation failed on register-with" 
              } 

              & .\tentacle.exe service --instance "Tentacle" --install --start --console | Write-Output
              if ($lastExitCode -ne 0) { 
                throw "Installation failed on service install" 
              } 

              Write-Output "Tentacle commands complete"             
              
              </powershell>